"""
An√°lise de Levantamentos de Portos sobre Navios Cancelados

Este notebook cont√©m um trabalho da faculdade feito por:
- Arley do Nascimento Vinagre (12722132338)
- Vinicius Santana (1272221567)
- Tauan Santos Santana (12722216126)

O objetivo deste trabalho √© analisar os levantamentos em formato Excel dos portos sobre navios cancelados.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Cancelamentos de Navios",
    page_icon="üö¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilo CSS personalizado
st.markdown("""
    <style>
    html, body, [class*="css"] {
        font-family: 'Inter', Arial, sans-serif !important;
    }
    .main {
        padding: 2.5rem 1.5rem 1.5rem 1.5rem;
        background: var(--background-color, #181a1b);
    }
    .stMetric, .stDataFrame, .stMarkdown, .js-plotly-plot, .stFileUploader, .stContainer {
        background: rgba(255,255,255,0.07);
        border-radius: 18px;
        box-shadow: none;
        padding: 1.2rem 1.2rem 1.2rem 1.2rem;
        margin-bottom: 1.5rem;
        border: 1px solid rgba(200,200,200,0.08);
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 1.5rem;
        background: transparent;
        padding: 0.5rem 0;
        margin-bottom: 0.5rem;
    }
    .stTabs [data-baseweb="tab"] {
        background: rgba(240,242,246,0.13);
        border-radius: 10px 10px 0 0;
        color: var(--text-color, #eaeaea);
        font-weight: 500;
        font-size: 1.1rem;
        transition: background 0.2s, color 0.2s;
        padding: 0.7rem 1.5rem;
        margin-right: 0.2rem;
    }
    .stTabs [data-baseweb="tab"]:hover {
        background: rgba(76,175,80,0.13);
        color: #4CAF50;
    }
    .stTabs [aria-selected="true"] {
        background: #4CAF50;
        color: #fff;
    }
    h1, h2, h3, h4, h5, h6 {
        color: var(--text-color, #fff);
        font-family: 'Inter', Arial, sans-serif;
        font-weight: 700;
        margin-bottom: 0.7rem;
        letter-spacing: -1px;
    }
    h1 { font-size: 2.5rem; margin-bottom: 1.2rem; }
    h2 { font-size: 2rem; margin-bottom: 1rem; }
    h3 { font-size: 1.4rem; margin-bottom: 0.7rem; }
    .stSubheader {
        color: #4CAF50;
        font-weight: 600;
        border-bottom: 2px solid #4CAF50;
        padding-bottom: 0.3rem;
        margin-bottom: 1rem;
        font-size: 1.2rem;
    }
    .stButton button {
        background: #4CAF50;
        color: #fff;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        transition: background 0.2s;
        font-size: 1rem;
        padding: 0.5rem 1.2rem;
    }
    .stButton button:hover {
        background: #388e3c;
    }
    /* Sidebar adaptativo */
    section[data-testid="stSidebar"] {
        background: linear-gradient(135deg, #23272f 70%, #4CAF50 100%) !important;
        color: #fff !important;
        padding: 0.5rem 0.5rem 0.5rem 0.5rem !important;
    }
    section[data-testid="stSidebar"] h3, section[data-testid="stSidebar"] h4, section[data-testid="stSidebar"] p, section[data-testid="stSidebar"] li {
        color: #fff !important;
        font-size: 1.05rem;
    }
    section[data-testid="stSidebar"] ul {
        margin-bottom: 0.5rem;
    }
    /* Cards principais */
    .dashboard-card {
        background: rgba(255,255,255,0.10);
        border-radius: 18px;
        box-shadow: none;
        padding: 1.2rem 1.2rem 1.2rem 1.2rem;
        margin-bottom: 1.5rem;
        border: 1px solid rgba(200,200,200,0.08);
        max-width: 900px;
        margin-left: auto;
        margin-right: auto;
    }
    /* Responsividade */
    @media (max-width: 900px) {
        .main { padding: 0.5rem; }
        .stContainer, .stMetric, .stDataFrame, .stMarkdown, .dashboard-card { padding: 0.5rem; }
        h1 { font-size: 1.5rem; }
        h2 { font-size: 1.2rem; }
    }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo e descri√ß√£o com estilo melhorado e adaptativo
st.markdown("""
    <div class='dashboard-card' style='text-align: center;'>
        <h1 style='margin-bottom: 0.5rem;'>üö¢ An√°lise de Levantamentos de Cancelamentos de Navios</h1>
        <div style='background: rgba(240,242,246,0.13); padding: 1.2rem; border-radius: 12px; margin-bottom: 0.5rem;'>
            <h2 style='color: #4CAF50; margin-bottom: 0.7rem;'>Dashboard Interativo de An√°lise de Cancelamentos</h2>
            <p style='color: #e0e0e0; margin-bottom: 1.2rem;'>Este aplicativo fornece insights detalhados sobre cancelamentos de navios, incluindo:</p>
            <div style='display: flex; justify-content: center; gap: 1.2rem; flex-wrap: wrap;'>
                <div style='background: rgba(255,255,255,0.10); padding: 0.7rem 1.1rem; border-radius: 8px;'>
                    <span style='font-size: 1.05rem;'>üìä An√°lise de tend√™ncias temporais</span>
                </div>
                <div style='background: rgba(255,255,255,0.10); padding: 0.7rem 1.1rem; border-radius: 8px;'>
                    <span style='font-size: 1.05rem;'>üö¢ Identifica√ß√£o de navios mais afetados</span>
                </div>
                <div style='background: rgba(255,255,255,0.10); padding: 0.7rem 1.1rem; border-radius: 8px;'>
                    <span style='font-size: 1.05rem;'>üåç An√°lise de rotas e portos</span>
                </div>
                <div style='background: rgba(255,255,255,0.10); padding: 0.7rem 1.1rem; border-radius: 8px;'>
                    <span style='font-size: 1.05rem;'>üìà M√©tricas e estat√≠sticas detalhadas</span>
                </div>
            </div>
        </div>
    </div>
""", unsafe_allow_html=True)

# Sidebar com estilo melhorado e adaptativo
with st.sidebar:
    st.markdown("""
        <div style='text-align: center; margin-bottom: 1.2rem;'>
            <img src='https://img.icons8.com/color/96/000000/cruise-ship.png' style='width: 90px; margin-bottom: 0.7rem;'>
            <h3 style='margin-bottom: 0.7rem;'>üìã Sobre o Projeto</h3>
            <div style='background: rgba(255,255,255,0.10); padding: 0.7rem; border-radius: 10px;'>
                <p style='margin-bottom: 0.7rem;'>Este dashboard foi desenvolvido como parte de um projeto acad√™mico para an√°lise de dados de cancelamentos de navios.</p>
                <h4 style='margin-bottom: 0.3rem;'>Integrantes:</h4>
                <ul style='list-style-type: none; padding: 0; margin: 0;'>
                    <li style='margin-bottom: 0.3rem;'>üë§ Arley do Nascimento Vinagre</li>
                    <li style='margin-bottom: 0.3rem;'>üë§ Vinicius Santana</li>
                    <li style='margin-bottom: 0.3rem;'>üë§ Tauan Santos Santana</li>
                </ul>
            </div>
        </div>
    """, unsafe_allow_html=True)
    st.markdown("---")
    st.markdown("""
        <div style='background: rgba(255,255,255,0.10); padding: 0.7rem; border-radius: 10px;'>
            <h3 style='margin-bottom: 0.7rem;'>üìä Filtros</h3>
            <p>Fa√ßa upload do arquivo Excel para come√ßar a an√°lise.</p>
        </div>
    """, unsafe_allow_html=True)

# Upload do arquivo
uploaded_file = st.file_uploader("üìÅ Fa√ßa o upload do arquivo Excel", type=["xlsx"])

if uploaded_file is not None:
    # Carregar dados
    df = pd.read_excel(uploaded_file)
    
    # Identificar colunas
    col_navio = 'Navio / Viagem' if 'Navio / Viagem' in df.columns else None
    col_status = 'Situa√ß√£o' if 'Situa√ß√£o' in df.columns else None
    col_data = 'Estimativa Chegada ETA' if 'Estimativa Chegada ETA' in df.columns else None
    col_motivo = 'MotivoCancelamento' if 'MotivoCancelamento' in df.columns else None
    col_rota = 'De / Para' if 'De / Para' in df.columns else None
    col_tipo_navio = 'Tipo' if 'Tipo' in df.columns else None
    col_conteineres = 'Movs' if 'Movs' in df.columns else None

    # Filtrar cancelamentos
    df[col_status] = df[col_status].astype(str).str.strip().str.lower()
    valores_cancelados = ['cancelado', 'cancelada', 'rejeitado', 'rej.', 'canceled']
    mask_cancel = df[col_status].isin(valores_cancelados)
    df_cancel = df.loc[mask_cancel].copy()

    # Preparar dados para o resumo
    contagem_navios = df_cancel[col_navio].value_counts().reset_index()
    contagem_navios.columns = ['Navio', 'QuantidadeCancelamentos']
    
    # Converter data e preparar an√°lise temporal
    df_cancel[col_data] = pd.to_datetime(df_cancel[col_data], dayfirst=True, errors='coerce')
    df_cancel['Ano'] = df_cancel[col_data].dt.year
    df_cancel['M√™s'] = df_cancel[col_data].dt.month
    df_cancel['Y-M'] = df_cancel[col_data].dt.to_period('M').astype(str)
    
    # An√°lise mensal
    contagem_mensal = df_cancel.groupby('Y-M').size().reset_index(name='Cancelamentos')
    contagem_mensal['Y-M'] = pd.to_datetime(contagem_mensal['Y-M'], format='%Y-%m')
    contagem_mensal = contagem_mensal.sort_values('Y-M')

    # Resumo final na sidebar
    with st.sidebar:
        st.markdown("### üìä Resumo dos Resultados")
        
        # Definir max_mes antes de usar
        max_mes = None
        if not contagem_mensal.empty and len(contagem_mensal) > 0:
            max_mes = contagem_mensal.loc[contagem_mensal['Cancelamentos'].idxmax()]
        
        resumo_texto = f"""
            - **Total de cancelamentos:** {len(df_cancel):,}
            - **Navio mais cancelado:** {contagem_navios.iloc[0]['Navio']} ({contagem_navios.iloc[0]['QuantidadeCancelamentos']} vezes)
        """
        
        if max_mes is not None:
            resumo_texto += f"""
            - **M√™s com mais cancelamentos:** {max_mes['Y-M'].strftime('%Y-%m')} ({int(max_mes['Cancelamentos'])} cancelamentos)
            """
        
        st.markdown(resumo_texto)

    # Criar abas para diferentes an√°lises
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìà Vis√£o Geral", 
        "üö¢ An√°lise de Navios", 
        "üìÖ An√°lise Temporal",
        "üåç An√°lise de Rotas",
        "üìä An√°lises Adicionais",
        "üîç An√°lises Avan√ßadas"
    ])

    with tab1:
        st.header("üìä Vis√£o Geral dos Cancelamentos")
        
        # M√©tricas principais com cards estilizados
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                "Total de Registros",
                f"{len(df):,}",
                delta=f"{len(df_cancel):,} cancelamentos"
            )
        with col2:
            st.metric(
                "Taxa de Cancelamento",
                f"{(len(df_cancel)/len(df)*100):.1f}%",
                delta=f"{(len(df_cancel)/len(df)*100):.1f}% do total"
            )
        with col3:
            st.metric(
                "M√©dia Di√°ria",
                f"{(len(df_cancel)/30):.1f}",
                delta="cancelamentos por dia"
            )

        # Gr√°fico de pizza com Plotly
        fig = px.pie(
            values=[len(df_cancel), len(df) - len(df_cancel)],
            names=['Cancelados', 'N√£o Cancelados'],
            title='Distribui√ß√£o de Cancelamentos',
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig, use_container_width=True)

        # Exibir primeiros registros com estilo
        st.subheader("üìã Primeiros Registros de Cancelamento")
        st.dataframe(
            df_cancel.head(),
            use_container_width=True,
            hide_index=True
        )

    with tab2:
        st.header("üö¢ An√°lise de Navios")
        
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üèÜ Top 10 Navios com Mais Cancelamentos")
            st.dataframe(
                contagem_navios.head(10),
                use_container_width=True,
                hide_index=True
            )
        
        with col2:
            # Gr√°fico de barras com Plotly
            fig = px.bar(
                contagem_navios.head(5),
                x='Navio',
                y='QuantidadeCancelamentos',
                title='Top 5 Navios com Mais Cancelamentos',
                color='QuantidadeCancelamentos',
                color_continuous_scale='Viridis'
            )
            fig.update_layout(
                xaxis_title="Navio",
                yaxis_title="Quantidade de Cancelamentos",
                showlegend=False
            )
            st.plotly_chart(fig, use_container_width=True)

    with tab3:
        st.header("üìÖ An√°lise Temporal")
        
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìä Cancelamentos por M√™s")
            st.dataframe(
                contagem_mensal,
                use_container_width=True,
                hide_index=True
            )
        
        with col2:
            # Gr√°fico de linha com Plotly
            fig = px.line(
                contagem_mensal,
                x='Y-M',
                y='Cancelamentos',
                title='Evolu√ß√£o Mensal de Cancelamentos',
                markers=True
            )
            fig.update_layout(
                xaxis_title="M√™s",
                yaxis_title="N√∫mero de Cancelamentos",
                showlegend=False
            )
            st.plotly_chart(fig, use_container_width=True)

    with tab4:
        st.header("üåç An√°lise de Rotas")
        
        if col_rota is not None:
            contagem_rotas = df_cancel[col_rota].value_counts().reset_index()
            contagem_rotas.columns = ['Rota', 'Cancelamentos']
            
            col1, col2 = st.columns(2)
            with col1:
                st.subheader("üó∫Ô∏è Top 10 Rotas com Mais Cancelamentos")
                st.dataframe(
                    contagem_rotas.head(10),
                    use_container_width=True,
                    hide_index=True
                )
            
            with col2:
                # Gr√°fico de barras com Plotly
                fig = px.bar(
                    contagem_rotas.head(5),
                    x='Rota',
                    y='Cancelamentos',
                    title='Top 5 Rotas com Mais Cancelamentos',
                    color='Cancelamentos',
                    color_continuous_scale='Viridis'
                )
                fig.update_layout(
                    xaxis_title="Rota",
                    yaxis_title="Quantidade de Cancelamentos",
                    showlegend=False
                )
                st.plotly_chart(fig, use_container_width=True)

    with tab5:
        st.header("üìä An√°lises Adicionais")
        
        # Criar subabas para an√°lises adicionais
        sub_tab1, sub_tab2, sub_tab3 = st.tabs(["üö¢ Tipo de Navio", "üì¶ Cont√™ineres", "üè¢ Outros"])
        
        with sub_tab1:
            if col_tipo_navio is not None:
                df_cancel[col_tipo_navio] = df_cancel[col_tipo_navio].astype(str).str.strip().str.capitalize()
                contagem_tipo_navio = df_cancel[col_tipo_navio].value_counts().reset_index()
                contagem_tipo_navio.columns = ['TipoNavio', 'Cancelamentos']
                
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("üìä Distribui√ß√£o por Tipo de Navio")
                    st.dataframe(
                        contagem_tipo_navio,
                        use_container_width=True,
                        hide_index=True
                    )
                
                with col2:
                    # Gr√°fico de pizza com Plotly
                    fig = px.pie(
                        contagem_tipo_navio,
                        values='Cancelamentos',
                        names='TipoNavio',
                        title='Distribui√ß√£o de Cancelamentos por Tipo de Navio',
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    st.plotly_chart(fig, use_container_width=True)
        
        with sub_tab2:
            if col_conteineres is not None:
                df_cancel[col_conteineres] = pd.to_numeric(df_cancel[col_conteineres], errors='coerce')
                df_cancel_conteineres = df_cancel.dropna(subset=[col_conteineres])
                
                if len(df_cancel_conteineres) > 0:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("üìä Estat√≠sticas de Cont√™ineres")
                        st.dataframe(
                            df_cancel_conteineres[col_conteineres].describe().reset_index(),
                            use_container_width=True,
                            hide_index=True
                        )
                    
                    with col2:
                        # Histograma com Plotly
                        fig = px.histogram(
                            df_cancel_conteineres,
                            x=col_conteineres,
                            title='Distribui√ß√£o da Quantidade de Cont√™ineres',
                            nbins=20,
                            color_discrete_sequence=['#4CAF50']
                        )
                        fig.update_layout(
                            xaxis_title="Quantidade de Cont√™ineres",
                            yaxis_title="Frequ√™ncia",
                            showlegend=False
                        )
                        st.plotly_chart(fig, use_container_width=True)
        
        with sub_tab3:
            # An√°lise por Armador
            col_armador = 'Armador' if 'Armador' in df_cancel.columns else None
            if col_armador is not None:
                st.subheader("üè¢ An√°lise por Armador")
                
                # Limpar e preparar dados do armador
                df_cancel[col_armador] = df_cancel[col_armador].astype(str).str.strip().str.capitalize()
                df_cancel[col_armador] = df_cancel[col_armador].replace('', 'N√£o Informado')
                df_cancel[col_armador] = df_cancel[col_armador].replace('Nan', 'N√£o Informado')
                df_cancel[col_armador] = df_cancel[col_armador].replace('None', 'N√£o Informado')
                
                contagem_armadores = df_cancel[col_armador].value_counts().reset_index()
                contagem_armadores.columns = ['Armador', 'Cancelamentos']
                
                if not contagem_armadores.empty and len(contagem_armadores) > 0:
                    col1, col2 = st.columns(2)
                    with col1:
                        st.subheader("üìä Top 10 Armadores")
                        st.dataframe(
                            contagem_armadores.head(10),
                            use_container_width=True,
                            hide_index=True
                        )
                        
                        # M√©tricas adicionais
                        total_armadores = len(contagem_armadores)
                        st.metric(
                            "Total de Armadores",
                            f"{total_armadores:,}",
                            delta=f"{(total_armadores/len(df_cancel)*100):.1f}% do total"
                        )

                    with col2:
                        if len(contagem_armadores) >= 5:
                            fig = px.bar(
                                contagem_armadores.head(5),
                                x='Armador',
                                y='Cancelamentos',
                                title='Top 5 Armadores com Mais Cancelamentos',
                                color='Cancelamentos',
                                color_continuous_scale='Viridis'
                            )
                            fig.update_layout(
                                xaxis_title="Armador",
                                yaxis_title="Quantidade de Cancelamentos",
                                showlegend=False
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            fig = px.bar(
                                contagem_armadores,
                                x='Armador',
                                y='Cancelamentos',
                                title='Armadores com Cancelamentos',
                                color='Cancelamentos',
                                color_continuous_scale='Viridis'
                            )
                            fig.update_layout(
                                xaxis_title="Armador",
                                yaxis_title="Quantidade de Cancelamentos",
                                showlegend=False
                            )
                            st.plotly_chart(fig, use_container_width=True)
                    
                    # An√°lise adicional
                    st.subheader("üìà An√°lise Detalhada")
                    col1, col2 = st.columns(2)
                    with col1:
                        # Estat√≠sticas b√°sicas
                        st.write("Estat√≠sticas dos Cancelamentos por Armador:")
                        st.write(contagem_armadores['Cancelamentos'].describe())
                    
                    with col2:
                        # Gr√°fico de pizza para distribui√ß√£o
                        fig = px.pie(
                            contagem_armadores.head(10),
                            values='Cancelamentos',
                            names='Armador',
                            title='Distribui√ß√£o dos 10 Maiores Armadores',
                            color_discrete_sequence=px.colors.qualitative.Set3
                        )
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("‚ÑπÔ∏è Nenhum dado de armador dispon√≠vel para an√°lise.")
            else:
                st.warning("‚ö†Ô∏è Coluna 'Armador' n√£o encontrada nos dados.")

    with tab6:
        st.header("üîç An√°lises Avan√ßadas")
        
        # Criar subabas para an√°lises avan√ßadas
        sub_tab1, sub_tab2, sub_tab3, sub_tab4, sub_tab5, sub_tab6, sub_tab7, sub_tab8 = st.tabs([
            "‚è±Ô∏è Tempo de Perman√™ncia",
            "üîÑ An√°lise por Servi√ßo",
            "üåç An√°lise por Pa√≠s",
            "üìè Dimens√µes dos Navios",
            "üìä Correla√ß√µes",
            "‚öì An√°lise por Ber√ßo",
            "üìÖ Cancelamentos por Dia",
            "üí∞ An√°lise de Custos"
        ])
        
        with sub_tab1:
            st.subheader("‚è±Ô∏è Tempo de Perman√™ncia no Porto")
            
            # Verificar colunas necess√°rias
            col_eta = 'Estimativa Chegada ETA' if 'Estimativa Chegada ETA' in df_cancel.columns else None
            col_etd = 'Estimativa Sa√≠da ETD' if 'Estimativa Sa√≠da ETD' in df_cancel.columns else None
            col_inicio = 'In√≠cio Opera√ß√£o' if 'In√≠cio Opera√ß√£o' in df_cancel.columns else None
            col_fim = 'Fim Opera√ß√£o' if 'Fim Opera√ß√£o' in df_cancel.columns else None
            
            if (col_eta and col_etd) or (col_inicio and col_fim):
                # Converter datas
                if col_eta and col_etd:
                    df_cancel[col_eta] = pd.to_datetime(df_cancel[col_eta], errors='coerce')
                    df_cancel[col_etd] = pd.to_datetime(df_cancel[col_etd], errors='coerce')
                    df_cancel['Tempo_Permanencia'] = (df_cancel[col_etd] - df_cancel[col_eta]).dt.total_seconds() / 3600  # em horas
                else:
                    df_cancel[col_inicio] = pd.to_datetime(df_cancel[col_inicio], errors='coerce')
                    df_cancel[col_fim] = pd.to_datetime(df_cancel[col_fim], errors='coerce')
                    df_cancel['Tempo_Permanencia'] = (df_cancel[col_fim] - df_cancel[col_inicio]).dt.total_seconds() / 3600  # em horas
                
                # Remover valores inv√°lidos
                df_tempo = df_cancel.dropna(subset=['Tempo_Permanencia'])
                df_tempo = df_tempo[df_tempo['Tempo_Permanencia'] > 0]
                
                if not df_tempo.empty:
                    col1, col2 = st.columns(2)
                    with col1:
                        # Estat√≠sticas b√°sicas
                        st.write("Estat√≠sticas do Tempo de Perman√™ncia (horas):")
                        st.write(df_tempo['Tempo_Permanencia'].describe())
                    
                    with col2:
                        # Boxplot
                        fig = px.box(
                            df_tempo,
                            y='Tempo_Permanencia',
                            title='Distribui√ß√£o do Tempo de Perman√™ncia',
                            color_discrete_sequence=['#4CAF50']
                        )
                        fig.update_layout(yaxis_title="Tempo (horas)")
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # An√°lise por armador
                    if col_armador is not None:
                        st.subheader("Tempo de Perman√™ncia por Armador")
                        tempo_por_armador = df_tempo.groupby(col_armador)['Tempo_Permanencia'].mean().reset_index()
                        tempo_por_armador = tempo_por_armador.sort_values('Tempo_Permanencia', ascending=False)
                        
                        fig = px.bar(
                            tempo_por_armador.head(10),
                            x=col_armador,
                            y='Tempo_Permanencia',
                            title='Top 10 Armadores por Tempo M√©dio de Perman√™ncia',
                            color='Tempo_Permanencia',
                            color_continuous_scale='Viridis'
                        )
                        fig.update_layout(
                            xaxis_title="Armador",
                            yaxis_title="Tempo M√©dio (horas)",
                            showlegend=False
                        )
                        st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("‚ö†Ô∏è N√£o h√° dados v√°lidos para an√°lise de tempo de perman√™ncia.")
            else:
                st.warning("‚ö†Ô∏è Colunas necess√°rias para an√°lise de tempo de perman√™ncia n√£o encontradas.")
        
        with sub_tab2:
            st.subheader("üîÑ An√°lise por Servi√ßo")
            
            col_servico = 'Servi√ßo' if 'Servi√ßo' in df_cancel.columns else None
            if col_servico is not None:
                contagem_servicos = df_cancel[col_servico].value_counts().reset_index()
                contagem_servicos.columns = ['Servi√ßo', 'Cancelamentos']
                
                col1, col2 = st.columns(2)
                with col1:
                    st.write("Top 10 Servi√ßos com Mais Cancelamentos:")
                    st.dataframe(
                        contagem_servicos.head(10),
                        use_container_width=True,
                        hide_index=True
                    )
                
                with col2:
                    # Gr√°fico de pizza
                    fig = px.pie(
                        contagem_servicos.head(10),
                        values='Cancelamentos',
                        names='Servi√ßo',
                        title='Distribui√ß√£o dos 10 Maiores Servi√ßos',
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Coluna 'Servi√ßo' n√£o encontrada nos dados.")
        
        with sub_tab3:
            st.subheader("üåç An√°lise por Pa√≠s")
            
            col_pais = 'Pa√≠s' if 'Pa√≠s' in df_cancel.columns else None
            if col_pais is not None:
                contagem_paises = df_cancel[col_pais].value_counts().reset_index()
                contagem_paises.columns = ['Pa√≠s', 'Cancelamentos']
                
                col1, col2 = st.columns(2)
                with col1:
                    st.write("Top 10 Pa√≠ses com Mais Cancelamentos:")
                    st.dataframe(
                        contagem_paises.head(10),
                        use_container_width=True,
                        hide_index=True
                    )
                
                with col2:
                    # Gr√°fico de barras
                    fig = px.bar(
                        contagem_paises.head(10),
                        x='Pa√≠s',
                        y='Cancelamentos',
                        title='Top 10 Pa√≠ses com Mais Cancelamentos',
                        color='Cancelamentos',
                        color_continuous_scale='Viridis'
                    )
                    fig.update_layout(
                        xaxis_title="Pa√≠s",
                        yaxis_title="Quantidade de Cancelamentos",
                        showlegend=False
                    )
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Coluna 'Pa√≠s' n√£o encontrada nos dados.")
        
        with sub_tab4:
            st.subheader("üìè An√°lise de Dimens√µes dos Navios")
            
            col_comprimento = 'Comprimento' if 'Comprimento' in df_cancel.columns else None
            col_largura = 'Largura' if 'Largura' in df_cancel.columns else None
            
            if col_comprimento and col_largura:
                # Converter para num√©rico
                df_cancel[col_comprimento] = pd.to_numeric(df_cancel[col_comprimento], errors='coerce')
                df_cancel[col_largura] = pd.to_numeric(df_cancel[col_largura], errors='coerce')
                
                # Remover valores inv√°lidos
                df_dimensoes = df_cancel.dropna(subset=[col_comprimento, col_largura])
                
                if not df_dimensoes.empty:
                    # Gr√°fico de dispers√£o
                    fig = px.scatter(
                        df_dimensoes,
                        x=col_comprimento,
                        y=col_largura,
                        title='Rela√ß√£o entre Comprimento e Largura dos Navios',
                        color=col_status if col_status else None,
                        color_discrete_sequence=px.colors.qualitative.Set3
                    )
                    fig.update_layout(
                        xaxis_title="Comprimento",
                        yaxis_title="Largura"
                    )
                    st.plotly_chart(fig, use_container_width=True)
                    
                    # Estat√≠sticas
                    st.write("Estat√≠sticas das Dimens√µes:")
                    st.write(df_dimensoes[[col_comprimento, col_largura]].describe())
                else:
                    st.warning("‚ö†Ô∏è N√£o h√° dados v√°lidos para an√°lise de dimens√µes.")
            else:
                st.warning("‚ö†Ô∏è Colunas de dimens√µes n√£o encontradas nos dados.")
        
        with sub_tab5:
            st.subheader("üìä Correla√ß√£o entre Vari√°veis Operacionais")
            
            # Selecionar colunas num√©ricas
            colunas_numericas = df_cancel.select_dtypes(include=[np.number]).columns.tolist()
            
            if len(colunas_numericas) > 1:
                # Calcular correla√ß√£o
                corr_matrix = df_cancel[colunas_numericas].corr()
                
                # Heatmap
                fig = px.imshow(
                    corr_matrix,
                    title='Matriz de Correla√ß√£o',
                    color_continuous_scale='RdBu',
                    aspect='auto'
                )
                st.plotly_chart(fig, use_container_width=True)
                
                # Exibir valores de correla√ß√£o
                st.write("Valores de Correla√ß√£o:")
                st.dataframe(corr_matrix, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è N√£o h√° colunas num√©ricas suficientes para an√°lise de correla√ß√£o.")
        
        with sub_tab6:
            st.subheader("‚öì An√°lise por Ber√ßo")
            
            col_berco = 'Ber√ßo' if 'Ber√ßo' in df_cancel.columns else None
            if col_berco is not None:
                contagem_bercos = df_cancel[col_berco].value_counts().reset_index()
                contagem_bercos.columns = ['Ber√ßo', 'Cancelamentos']
                
                col1, col2 = st.columns(2)
                with col1:
                    st.write("Top 10 Ber√ßos com Mais Cancelamentos:")
                    st.dataframe(
                        contagem_bercos.head(10),
                        use_container_width=True,
                        hide_index=True
                    )
                
                with col2:
                    # Gr√°fico de barras horizontais
                    fig = px.bar(
                        contagem_bercos.head(10),
                        y='Ber√ßo',
                        x='Cancelamentos',
                        title='Top 10 Ber√ßos com Mais Cancelamentos',
                        color='Cancelamentos',
                        color_continuous_scale='Viridis',
                        orientation='h'
                    )
                    fig.update_layout(
                        yaxis_title="Ber√ßo",
                        xaxis_title="Quantidade de Cancelamentos",
                        showlegend=False
                    )
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Coluna 'Ber√ßo' n√£o encontrada nos dados.")
        
        with sub_tab7:
            st.subheader("üìÖ Cancelamentos por Dia da Semana")
            
            if col_data is not None:
                # Converter data e extrair dia da semana
                df_cancel[col_data] = pd.to_datetime(df_cancel[col_data], errors='coerce')
                df_cancel['Dia_Semana'] = df_cancel[col_data].dt.day_name()
                
                # Contagem por dia da semana
                contagem_dias = df_cancel['Dia_Semana'].value_counts().reset_index()
                contagem_dias.columns = ['Dia da Semana', 'Cancelamentos']
                
                # Ordenar dias da semana
                ordem_dias = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                contagem_dias['Dia da Semana'] = pd.Categorical(
                    contagem_dias['Dia da Semana'],
                    categories=ordem_dias,
                    ordered=True
                )
                contagem_dias = contagem_dias.sort_values('Dia da Semana')
                
                col1, col2 = st.columns(2)
                with col1:
                    st.write("Cancelamentos por Dia da Semana:")
                    st.dataframe(
                        contagem_dias,
                        use_container_width=True,
                        hide_index=True
                    )
                
                with col2:
                    # Gr√°fico de barras
                    fig = px.bar(
                        contagem_dias,
                        x='Dia da Semana',
                        y='Cancelamentos',
                        title='Cancelamentos por Dia da Semana',
                        color='Cancelamentos',
                        color_continuous_scale='Viridis'
                    )
                    fig.update_layout(
                        xaxis_title="Dia da Semana",
                        yaxis_title="Quantidade de Cancelamentos",
                        showlegend=False
                    )
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Coluna de data n√£o encontrada nos dados.")

        with sub_tab8:
            st.subheader("üí∞ An√°lise de Custos de Exporta√ß√£o")
            
            # Par√¢metros de custos
            CUSTOS = {
                "TEU":               350.0,   # USD por TEU
                "OPERACAO_PORTO":    8000.0,  # USD fixo por escala
                "DOCUMENTACAO":      3500.0,  # USD fixo por escala
                "ARMAZENAGEM_DIA":    200.0,  # USD por TEU/dia
                "ARMAZENAGEM_DIAS":      5,   # dias m√©dios de armazenagem
                "INSPECAO":          1500.0   # USD fixo por escala
            }

            def calcular_custos(df: pd.DataFrame,
                              coluna_teu: str,
                              coluna_data: str | None = None) -> pd.DataFrame:
                """Adiciona colunas de custo e devolve c√≥pia do dataframe."""
                df = df.copy()

                # TEUs num√©ricos
                df[coluna_teu] = pd.to_numeric(df[coluna_teu], errors="coerce").fillna(0)

                # Custos principais
                df["C_TEUS"]     = df[coluna_teu] * CUSTOS["TEU"]
                df["C_OPER"]     = CUSTOS["OPERACAO_PORTO"]
                df["C_DOC"]      = CUSTOS["DOCUMENTACAO"]

                # Armazenagem (opcionalmente usa a data; aqui usamos valor m√©dio fixo)
                df["C_ARM"]      = (
                    df[coluna_teu] * CUSTOS["ARMAZENAGEM_DIA"] * CUSTOS["ARMAZENAGEM_DIAS"]
                )

                # Inspe√ß√£o
                df["C_INSP"]     = CUSTOS["INSPECAO"]

                # Custo total
                colunas_custos = ["C_TEUS", "C_OPER", "C_DOC", "C_ARM", "C_INSP"]
                df["CUSTO_TOTAL"] = df[colunas_custos].sum(axis=1)

                return df

            if col_conteineres is not None:
                # Calcular custos
                df_cancel = calcular_custos(df_cancel, col_conteineres, col_data)

                # M√©tricas principais
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Custo Total Perdido",
                            f"USD {df_cancel['CUSTO_TOTAL'].sum():,.2f}")
                with col2:
                    st.metric("Custo M√©dio por Cancelamento",
                            f"USD {df_cancel['CUSTO_TOTAL'].mean():,.2f}")
                with col3:
                    st.metric("Total de TEUs Afetados",
                            f"{df_cancel[col_conteineres].sum():,.0f}")

                # Gr√°ficos de distribui√ß√£o e evolu√ß√£o temporal
                st.plotly_chart(
                    px.box(df_cancel, y="CUSTO_TOTAL",
                        title="Distribui√ß√£o do Custo por Cancelamento"),
                    use_container_width=True
                )

                if col_data is not None:
                    df_cancel["Mes"] = pd.to_datetime(df_cancel[col_data]).dt.to_period("M")
                    custos_mensais = (df_cancel.groupby("Mes")["CUSTO_TOTAL"]
                                    .sum()
                                    .reset_index()
                                    .assign(Mes=lambda d: d["Mes"].astype(str)))

                    st.plotly_chart(
                        px.line(custos_mensais, x="Mes", y="CUSTO_TOTAL",
                                title="Evolu√ß√£o Mensal dos Custos", markers=True),
                        use_container_width=True
                    )

                # Detalhamento dos componentes de custo
                componentes = (
                    df_cancel[["C_TEUS", "C_OPER", "C_DOC", "C_ARM", "C_INSP"]]
                    .sum()
                    .rename(index={
                        "C_TEUS": "Cont√™ineres",
                        "C_OPER": "Opera√ß√£o Portu√°ria",
                        "C_DOC":  "Documenta√ß√£o",
                        "C_ARM":  "Armazenagem",
                        "C_INSP": "Inspe√ß√£o"
                    })
                    .reset_index()
                    .rename(columns={"index": "Tipo de Custo", 0: "Valor Total (USD)"})
                )

                col1, col2 = st.columns(2)
                with col1:
                    st.dataframe(componentes, hide_index=True, use_container_width=True)
                with col2:
                    st.plotly_chart(
                        px.pie(componentes, values="Valor Total (USD)",
                            names="Tipo de Custo",
                            title="Distribui√ß√£o dos Custos"),
                        use_container_width=True
                    )

                # An√°lise por armador (se dispon√≠vel)
                if col_armador is not None:
                    st.subheader("An√°lise de Custos por Armador")
                    custos_por_armador = (df_cancel.groupby(col_armador)["CUSTO_TOTAL"]
                                        .agg(['sum', 'mean', 'count'])
                                        .reset_index()
                                        .rename(columns={
                                            'sum': 'Custo Total',
                                            'mean': 'Custo M√©dio',
                                            'count': 'Quantidade'
                                        })
                                        .sort_values('Custo Total', ascending=False))

                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("Top 10 Armadores por Custo Total:")
                        st.dataframe(
                            custos_por_armador.head(10),
                            use_container_width=True,
                            hide_index=True
                        )

                    with col2:
                        fig = px.bar(
                            custos_por_armador.head(10),
                            x=col_armador,
                            y='Custo Total',
                            title='Top 10 Armadores por Custo Total',
                            color='Custo Total',
                            color_continuous_scale='Viridis'
                        )
                        fig.update_layout(
                            xaxis_title="Armador",
                            yaxis_title="Custo Total (USD)",
                            showlegend=False
                        )
                        st.plotly_chart(fig, use_container_width=True)

            else:
                st.warning("‚ö†Ô∏è Coluna de cont√™ineres n√£o encontrada nos dados. N√£o √© poss√≠vel calcular os custos.")

else:
    st.warning("‚ö†Ô∏è Por favor, fa√ßa o upload do arquivo Excel para come√ßar a an√°lise.") 