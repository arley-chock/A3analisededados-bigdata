"""
An√°lise de Levantamentos de Portos sobre Navios Cancelados

Este notebook cont√©m um trabalho da faculdade feito por:
- Arley do Nascimento Vinagre (12722132338)
- Vinicius Santana (1272221567)
- Tauan Santos Santana (12722216126)

O objetivo deste trabalho √© analisar os levantamentos em formato Excel dos portos sobre navios cancelados.
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime

# ‚Äî‚Äî‚Äî Novo: tema unificado para gr√°ficos ‚Äî‚Äî‚Äî
def theme_fig(fig, altura=450):
    fig.update_layout(
        height=altura,
        margin=dict(l=40, r=40, t=60, b=40),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(size=12, color='#E0E0E0'),
        legend=dict(yanchor="bottom", y=1.02, xanchor="right", x=1)
    )
    return fig

# ‚Äî‚Äî‚Äî Novo: fun√ß√£o para criar o gr√°fico de Top 10 Navios ‚Äî‚Äî‚Äî
def grafico_top_navios(df_cancel, col_navio):
    cont = (
        df_cancel[col_navio]
        .value_counts()
        .rename_axis(col_navio)
        .reset_index(name='Cancelamentos')
    )
    fig = px.bar(
        cont.head(10),
        y=col_navio, x='Cancelamentos',
        orientation='h',
        title='Top 10 navios mais cancelados',
        color='Cancelamentos',
        color_continuous_scale='Blues'
    )
    fig.update_layout(yaxis_title=None, xaxis_title='Cancelamentos')
    return theme_fig(fig, altura=450)

# Fun√ß√£o original de layout de gr√°ficos para uso geral
def ajustar_layout_grafico(fig, altura=500):
    fig.update_layout(
        height=altura,
        margin=dict(l=50, r=50, t=50, b=50),
        paper_bgcolor='rgba(0,0,0,0)',
        plot_bgcolor='rgba(0,0,0,0)',
        font=dict(size=12),
        showlegend=True,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    return fig

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Cancelamentos de Navios",
    page_icon="üö¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Barra de Pesquisa e Modelos
with st.sidebar:
    st.markdown("### üîç Pesquisa e Modelos")
    termo_pesquisa = st.text_input("Pesquisar por navio, armador ou rota")
    st.markdown("### üìã Modelos de Relat√≥rios")
    modelo_selecionado = st.selectbox(
        "Selecione um modelo de relat√≥rio",
        ["An√°lise Completa", "An√°lise de Custos", "An√°lise por Armador", "An√°lise Temporal"]
    )
    if st.button("Aplicar Modelo"):
        st.session_state['modelo_atual'] = modelo_selecionado
        st.session_state['termo_pesquisa'] = termo_pesquisa

# CSS personalizado para layout e responsividade
st.markdown("""
    <style>
    .main { padding:2rem; max-width:1400px; margin:0 auto; }
    .js-plotly-plot { margin:1rem 0; padding:1rem; background:rgba(255,255,255,0.07); border-radius:12px; box-shadow:0 4px 6px rgba(0,0,0,0.1); }
    .stContainer { margin:1rem 0; padding:1rem; }
    [data-testid="column"] { padding:0 1rem; }
    .stMetric { margin:1rem 0; }
    .stTabs [data-baseweb="tab-list"] { gap:1rem; margin-bottom:1.5rem; }
    .stTabs [data-baseweb="tab"] { padding:0.8rem 1.5rem; margin-right:0.5rem; }
    .dashboard-card { margin:1.5rem 0; padding:1.5rem; }
    @media (max-width:1200px) { .main { padding:1rem; } [data-testid="column"]{ padding:0 0.5rem; } }
    @media (max-width:768px) { .main { padding:0.5rem; } .stTabs [data-baseweb="tab"]{ padding:0.6rem 1rem; font-size:0.9rem; } }
    </style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown("""
    <div class='dashboard-card' style='text-align:center;'>
        <h1>üö¢ An√°lise de Cancelamentos de Navios</h1>
        <p style='color:#e0e0e0;'>Dashboard Interativo com insights sobre cancelamentos</p>
    </div>
""", unsafe_allow_html=True)

# Sidebar sobre o projeto e refer√™ncias de custos
with st.sidebar:
    st.markdown("""
        <div style='text-align:center;'>
            <img src='https://img.icons8.com/color/96/000000/cruise-ship.png' style='width:90px;'/><br>
            <h3>üìã Sobre o Projeto</h3>
            <p>Projeto acad√™mico de an√°lise de dados de cancelamentos.</p>
            <ul>
                <li>üë§ Arley do Nascimento Vinagre</li>
                <li>üë§ Vinicius Santana</li>
                <li>üë§ Tauan Santos Santana</li>
            </ul>
        </div>
        <hr>
        <h3>üí∞ Refer√™ncias de Custos</h3>
        <ul style='font-size:0.9rem;'>
            <li>THC: R$1.200,00/TEU</li>
            <li>Armazenagem: R$575,00/TEU/dia</li>
            <li>Despachante: R$950,00</li>
            <li>Scanner: R$95,00/cont√™iner</li>
        </ul>
        <p style='color:#4CAF50;'>C√¢mbio m√©dio: R$5,10/US$1</p>
    """, unsafe_allow_html=True)

# Upload de arquivo
uploaded_file = st.file_uploader("üìÅ Fa√ßa o upload do arquivo Excel", type=["xlsx"])
if uploaded_file is None:
    st.warning("‚ö†Ô∏è Por favor, fa√ßa o upload do arquivo Excel para come√ßar a an√°lise.")
    st.stop()

if uploaded_file is not None:
    # Carregar dados
    df = pd.read_excel(uploaded_file)
    
    # Identificar colunas
    col_navio = 'Navio / Viagem' if 'Navio / Viagem' in df.columns else None
    col_status = 'Situa√ß√£o' if 'Situa√ß√£o' in df.columns else None
    col_data = 'Estimativa Chegada ETA' if 'Estimativa Chegada ETA' in df.columns else None
    col_motivo = 'MotivoCancelamento' if 'MotivoCancelamento' in df.columns else None
    col_rota = 'De / Para' if 'De / Para' in df.columns else None
    col_tipo_navio = 'Tipo' if 'Tipo' in df.columns else None
    col_conteineres = 'Movs' if 'Movs' in df.columns else None
    col_armador = 'Armador' if 'Armador' in df.columns else None

    # Filtrar cancelamentos
    if col_status is not None:
        df[col_status] = df[col_status].astype(str).str.strip().str.lower()
        valores_cancelados = ['cancelado', 'cancelada', 'rejeitado', 'rej.', 'canceled']
        mask_cancel = df[col_status].isin(valores_cancelados)
        df_cancel = df.loc[mask_cancel].copy()

        # Converter colunas num√©ricas
        if col_conteineres is not None:
            df_cancel[col_conteineres] = pd.to_numeric(df_cancel[col_conteineres], errors='coerce').fillna(0)
            df[col_conteineres] = pd.to_numeric(df[col_conteineres], errors='coerce').fillna(0)

        # Converter datas
        if col_data is not None:
            df_cancel[col_data] = pd.to_datetime(df_cancel[col_data], errors='coerce')
            df[col_data] = pd.to_datetime(df[col_data], errors='coerce')

    # Preparar dados para o resumo
    contagem_navios = df_cancel[col_navio].value_counts().reset_index()
    contagem_navios.columns = ['Navio', 'QuantidadeCancelamentos']
    
    # Converter data e preparar an√°lise temporal
    df_cancel[col_data] = pd.to_datetime(df_cancel[col_data], dayfirst=True, errors='coerce')
    df_cancel['Ano'] = df_cancel[col_data].dt.year
    df_cancel['M√™s'] = df_cancel[col_data].dt.month
    # Remover registros sem data v√°lida antes de criar 'Y-M'
    df_cancel_valid = df_cancel.dropna(subset=[col_data]).copy()
    df_cancel_valid['Y-M'] = df_cancel_valid[col_data].dt.to_period('M').astype(str)
    contagem_mensal = df_cancel_valid.groupby('Y-M').size().reset_index(name='Cancelamentos')
    contagem_mensal['Y-M'] = pd.to_datetime(contagem_mensal['Y-M'], format='%Y-%m')
    contagem_mensal = contagem_mensal.sort_values('Y-M')

    # Resumo final na sidebar
    with st.sidebar:
        st.markdown("### üìä Resumo dos Resultados")
        
        # Definir max_mes antes de usar
        max_mes = None
        if not contagem_mensal.empty:
            max_mes = contagem_mensal.loc[contagem_mensal['Cancelamentos'].idxmax()]
        
        resumo_texto = f"""
            - **Total de cancelamentos:** {len(df_cancel):,}
            - **Navio mais cancelado:** {contagem_navios.iloc[0]['Navio']} ({contagem_navios.iloc[0]['QuantidadeCancelamentos']} vezes)
        """
        
        if max_mes is not None:
            resumo_texto += f"""
            - **M√™s com mais cancelamentos:** {max_mes['Y-M']} ({int(max_mes['Cancelamentos'])} cancelamentos)
            """
        
        st.markdown(resumo_texto)

    # Criar abas para diferentes an√°lises
    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
        "üìà Vis√£o Geral", 
        "üö¢ An√°lise de Navios", 
        "üìÖ An√°lise Temporal",
        "üåç An√°lise de Rotas",
        "üìä An√°lises Adicionais",
        "üîç An√°lises Avan√ßadas"
    ])

    with tab1:
        st.header("üìä Vis√£o Geral dos Cancelamentos")
        
        # Adicionar seletores para cruzamento de dados
        col1, col2 = st.columns(2)
        with col1:
            dimensao_x = st.selectbox(
                "Selecione a dimens√£o para o eixo X",
                ["M√™s", "Navio", "Armador", "Rota", "Tipo de Navio"]
            )
        with col2:
            dimensao_y = st.selectbox(
                "Selecione a dimens√£o para o eixo Y",
                ["Quantidade de Cancelamentos", "Custo Total", "TEUs", "Tempo de Perman√™ncia"]
            )
        
        # M√©tricas principais com cards estilizados
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric(
                "Total de Registros",
                f"{len(df):,}",
                delta=f"{len(df_cancel):,} cancelamentos"
            )
        with col2:
            st.metric(
                "Taxa de Cancelamento",
                f"{(len(df_cancel)/len(df)*100):.1f}%",
                delta=f"{(len(df_cancel)/len(df)*100):.1f}% do total"
            )
        with col3:
            st.metric(
                "M√©dia Di√°ria",
                f"{(len(df_cancel)/30):.1f}",
                delta="cancelamentos por dia"
            )

        # Gr√°fico de cruzamento de dados
        if dimensao_x and dimensao_y:
            try:
                # Preparar dados para o gr√°fico
                if dimensao_x == "M√™s":
                    dados_x = df_cancel_valid['Y-M'].astype(str)
                elif dimensao_x == "Navio":
                    dados_x = df_cancel[col_navio].astype(str)
                elif dimensao_x == "Armador":
                    dados_x = df_cancel[col_armador].astype(str) if col_armador else None
                elif dimensao_x == "Rota":
                    dados_x = df_cancel[col_rota].astype(str)
                elif dimensao_x == "Tipo de Navio":
                    dados_x = df_cancel[col_tipo_navio].astype(str)

                if dados_x is not None:
                    if dimensao_y == "Quantidade de Cancelamentos":
                        dados_y = df_cancel.groupby(dados_x).size()
                    elif dimensao_y == "Custo Total":
                        dados_y = df_cancel.groupby(dados_x)['CUSTO_TOTAL'].sum()
                    elif dimensao_y == "TEUs":
                        dados_y = df_cancel.groupby(dados_x)[col_conteineres].sum()
                    elif dimensao_y == "Tempo de Perman√™ncia":
                        dados_y = df_cancel.groupby(dados_x)['Tempo_Permanencia'].mean()

                    # Criar DataFrame para o gr√°fico
                    df_grafico = pd.DataFrame({
                        dimensao_x: dados_x.unique(),
                        dimensao_y: dados_y.values
                    })

                    # Ordenar por valores
                    df_grafico = df_grafico.sort_values(by=dimensao_y, ascending=False)

                    # Criar gr√°fico com layout ajustado
                    fig = px.bar(
                        df_grafico,
                        x=dimensao_x,
                        y=dimensao_y,
                        title=f"{dimensao_y} por {dimensao_x}",
                        color=dimensao_y,
                        color_continuous_scale='Viridis'
                    )
                    fig = ajustar_layout_grafico(fig, altura=500)
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning(f"N√£o h√° dados dispon√≠veis para a dimens√£o {dimensao_x}")
            except Exception as e:
                st.error(f"Erro ao criar gr√°fico: {str(e)}")
                st.info("Tente selecionar outras dimens√µes para an√°lise")

        # Gr√°fico de pizza com Plotly
        fig = px.pie(
            values=[len(df_cancel), len(df) - len(df_cancel)],
            names=['Cancelados', 'N√£o Cancelados'],
            title='Distribui√ß√£o de Cancelamentos',
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        fig = ajustar_layout_grafico(fig, altura=400)
        st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìã Primeiros Registros de Cancelamento")
    st.dataframe(df_cancel.head(), hide_index=True, use_container_width=True)

with tab2:
    st.header("üö¢ An√°lise de Navios")
    if contagem_navios['QuantidadeCancelamentos'].nunique() == 1:
        st.info("Todos os navios cancelados tiveram apenas 1 ocorr√™ncia no per√≠odo analisado.")
        st.dataframe(contagem_navios, hide_index=True, use_container_width=True)
    else:
        col_graf, col_tab = st.columns([1.2,1], gap="large")
        with col_graf:
            st.subheader("üèÜ Top 10 Navios com Mais Cancelamentos")
            st.plotly_chart(grafico_top_navios(df_cancel, 'Navio'), use_container_width=True)
        with col_tab:
            st.subheader("üìã Detalhe dos 10 primeiros")
            st.dataframe(
                contagem_navios.head(10),
                hide_index=True,
                use_container_width=True,
                column_config={"QuantidadeCancelamentos": st.column_config.NumberColumn(format="%d")}
            )
        # Evolu√ß√£o mensal do l√≠der
        lider = contagem_navios.iloc[0]['Navio']
        df_lider = df_cancel[df_cancel['Navio']==lider].copy()
        if col_data:
            df_lider['M√™s'] = df_lider[col_data].dt.to_period('M').astype(str)
            if df_lider['M√™s'].nunique()>1:
                st.markdown(f"### üìà Evolu√ß√£o mensal de cancelamentos ‚Äì **{lider}**")
                evo = (
                    df_lider['M√™s']
                    .value_counts()
                    .sort_index()
                    .rename_axis('M√™s')
                    .reset_index(name='Cancelamentos')
                )
                fig_evo = px.line(evo, x='M√™s', y='Cancelamentos', markers=True)
                st.plotly_chart(theme_fig(fig_evo, altura=350), use_container_width=True)

with tab3:
    st.header("üìÖ An√°lise Temporal")
    c1, c2 = st.columns(2)
    with c1:
        st.subheader("üìä Cancelamentos por M√™s")
        st.dataframe(contagem_mensal, hide_index=True, use_container_width=True)
    with c2:
        fig = px.line(contagem_mensal, x='Y-M', y='Cancelamentos', markers=True,
                      title='Evolu√ß√£o Mensal de Cancelamentos')
        fig.update_layout(xaxis_title="M√™s", yaxis_title="N√∫mero de Cancelamentos", showlegend=False)
        st.plotly_chart(fig, use_container_width=True)

with tab4:
    st.header("üåç An√°lise de Rotas")
    if col_rota:
        contagem_rotas = (
            df_cancel[col_rota]
            .value_counts()
            .rename_axis('Rota')
            .reset_index(name='Cancelamentos')
        )
        r1, r2 = st.columns(2)
        with r1:
            st.subheader("üó∫Ô∏è Top 10 Rotas com Mais Cancelamentos")
            st.dataframe(contagem_rotas.head(10), hide_index=True, use_container_width=True)
        with r2:
            fig = px.bar(contagem_rotas.head(5), x='Rota', y='Cancelamentos',
                         title='Top 5 Rotas com Mais Cancelamentos',
                         color='Cancelamentos', color_continuous_scale='Viridis')
            fig.update_layout(xaxis_title="Rota", yaxis_title="Qtd Cancelamentos", showlegend=False)
            st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è Coluna 'De / Para' n√£o encontrada.")

with tab5:
    st.header("üìä An√°lises Adicionais")
    sub1, sub2, sub3 = st.tabs(["üö¢ Tipo de Navio","üì¶ Cont√™ineres","üè¢ Outros"])

    with sub1:
        if col_tipo_navio:
            df_cancel[col_tipo_navio] = df_cancel[col_tipo_navio].astype(str).str.strip().str.capitalize()
            cont_tipo = (
                df_cancel[col_tipo_navio]
                .value_counts()
                .rename_axis('TipoNavio')
                .reset_index(name='Cancelamentos')
            )
            t1, t2 = st.columns(2)
            with t1:
                st.subheader("üìä Distribui√ß√£o por Tipo de Navio")
                st.dataframe(cont_tipo, hide_index=True, use_container_width=True)
            with t2:
                fig = px.pie(cont_tipo, values='Cancelamentos', names='TipoNavio',
                             title='Distribui√ß√£o por Tipo de Navio', color_discrete_sequence=px.colors.qualitative.Set3)
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Coluna 'Tipo' n√£o encontrada.")

    with sub2:
        if col_conteineres:
            df_cancel[col_conteineres] = pd.to_numeric(df_cancel[col_conteineres], errors='coerce')
            df_cont = df_cancel.dropna(subset=[col_conteineres])
            if not df_cont.empty:
                c1, c2 = st.columns(2)
                with c1:
                    st.subheader("üìä Estat√≠sticas de Cont√™ineres")
                    st.dataframe(df_cont[col_conteineres].describe().reset_index(), hide_index=True, use_container_width=True)
                with c2:
                    fig = px.histogram(df_cont, x=col_conteineres, title='Distribui√ß√£o da Quantidade de Cont√™ineres', nbins=20)
                    fig.update_layout(xaxis_title="Quantidade de Cont√™ineres", yaxis_title="Frequ√™ncia", showlegend=False)
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Sem dados de cont√™ineres v√°lidos.")
        else:
            st.warning("‚ö†Ô∏è Coluna 'Movs' n√£o encontrada.")

    with sub3:
        if col_armador:
            df_cancel[col_armador] = (df_cancel[col_armador].astype(str)
                                      .str.strip()
                                      .replace({'':'N√£o Informado','nan':'N√£o Informado','None':'N√£o Informado'}))
            cont_arm = (
                df_cancel[col_armador]
                .value_counts()
                .rename_axis('Armador')
                .reset_index(name='Cancelamentos')
            )
            if not cont_arm.empty:
                a1, a2 = st.columns(2)
                with a1:
                    st.subheader("üìä Top 10 Armadores")
                    st.dataframe(cont_arm.head(10), hide_index=True, use_container_width=True)
                    st.metric("Total de Armadores", f"{len(cont_arm):,}", delta=f"{len(cont_arm)/len(df_cancel)*100:.1f}% do total")
                with a2:
                    top5 = cont_arm.head(5) if len(cont_arm)>=5 else cont_arm
                    fig = px.bar(top5, x='Armador', y='Cancelamentos', title='Top Armadores', color='Cancelamentos', color_continuous_scale='Viridis')
                    fig.update_layout(xaxis_title="Armador", yaxis_title="Qtd Cancelamentos", showlegend=False)
                    st.plotly_chart(fig, use_container_width=True)
                st.subheader("üìà An√°lise Detalhada")
                d1, d2 = st.columns(2)
                with d1:
                    st.write(cont_arm['Cancelamentos'].describe())
                with d2:
                    fig = px.pie(cont_arm.head(10), values='Cancelamentos', names='Armador', title='Distribui√ß√£o dos 10 Maiores Armadores', color_discrete_sequence=px.colors.qualitative.Set3)
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("‚ÑπÔ∏è Nenhum dado de armador dispon√≠vel.")
        else:
            st.warning("‚ö†Ô∏è Coluna 'Armador' n√£o encontrada.")

with tab6:
    st.header("üîç An√°lises Avan√ßadas")
    sb1, sb2, sb3, sb4, sb5, sb6, sb7, sb8 = st.tabs([
        "‚è±Ô∏è Tempo de Perman√™ncia","üîÑ Servi√ßo","üåç Pa√≠s","üìè Dimens√µes",
        "üìä Correla√ß√µes","‚öì Ber√ßo","üìÖ Dia da Semana","üí∞ Custos"
    ])

    # ‚è±Ô∏è Tempo de Perman√™ncia
    with sb1:
        col_eta = 'Estimativa Chegada ETA' if 'Estimativa Chegada ETA' in df_cancel.columns else None
        col_etd = 'Estimativa Sa√≠da ETD' if 'Estimativa Sa√≠da ETD' in df_cancel.columns else None
        col_ini = 'In√≠cio Opera√ß√£o' if 'In√≠cio Opera√ß√£o' in df_cancel.columns else None
        col_fim = 'Fim Opera√ß√£o' if 'Fim Opera√ß√£o' in df_cancel.columns else None

        if (col_eta and col_etd) or (col_ini and col_fim):
            if col_eta and col_etd:
                df_cancel[col_eta] = pd.to_datetime(df_cancel[col_eta], errors='coerce')
                df_cancel[col_etd] = pd.to_datetime(df_cancel[col_etd], errors='coerce')
                df_cancel['Tempo_Permanencia'] = (df_cancel[col_etd] - df_cancel[col_eta]).dt.total_seconds()/3600
            else:
                df_cancel[col_ini] = pd.to_datetime(df_cancel[col_ini], errors='coerce')
                df_cancel[col_fim] = pd.to_datetime(df_cancel[col_fim], errors='coerce')
                df_cancel['Tempo_Permanencia'] = (df_cancel[col_fim] - df_cancel[col_ini]).dt.total_seconds()/3600

            df_tmp = df_cancel.dropna(subset=['Tempo_Permanencia'])
            df_tmp = df_tmp[df_tmp['Tempo_Permanencia']>0]
            if not df_tmp.empty:
                t1, t2 = st.columns(2)
                with t1:
                    st.write(df_tmp['Tempo_Permanencia'].describe())
                with t2:
                    fig = px.box(df_tmp, y='Tempo_Permanencia', title='Distribui√ß√£o do Tempo de Perman√™ncia')
                    fig.update_layout(yaxis_title="Horas")
                    st.plotly_chart(fig, use_container_width=True)
                if col_armador:
                    st.subheader("Tempo M√©dio por Armador")
                    tm = df_tmp.groupby(col_armador)['Tempo_Permanencia'].mean().reset_index().sort_values('Tempo_Permanencia', ascending=False)
                    fig = px.bar(tm.head(10), x=col_armador, y='Tempo_Permanencia', title='Top 10 Armadores por Tempo M√©dio', color='Tempo_Permanencia', color_continuous_scale='Viridis')
                    fig.update_layout(xaxis_title="Armador", yaxis_title="Horas", showlegend=False)
                    st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Sem dados v√°lidos de tempo de perman√™ncia.")
        else:
            st.warning("‚ö†Ô∏è Colunas de tempo n√£o encontradas.")

    # üîÑ Servi√ßo
    with sb2:
        col_serv = 'Servi√ßo' if 'Servi√ßo' in df_cancel.columns else None
        if col_serv:
            cs = df_cancel[col_serv].value_counts().rename_axis('Servi√ßo').reset_index(name='Cancelamentos')
            s1, s2 = st.columns(2)
            with s1:
                st.write(cs.head(10))
            with s2:
                fig = px.pie(cs.head(10), values='Cancelamentos', names='Servi√ßo', title='Top 10 Servi√ßos')
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Coluna 'Servi√ßo' n√£o encontrada.")

    # üåç Pa√≠s
    with sb3:
        col_pais = 'Pa√≠s' if 'Pa√≠s' in df_cancel.columns else None
        if col_pais:
            cp = df_cancel[col_pais].value_counts().rename_axis('Pa√≠s').reset_index(name='Cancelamentos')
            p1, p2 = st.columns(2)
            with p1:
                st.write(cp.head(10))
            with p2:
                fig = px.bar(cp.head(10), x='Pa√≠s', y='Cancelamentos', title='Top 10 Pa√≠ses', color='Cancelamentos', color_continuous_scale='Viridis')
                fig.update_layout(showlegend=False)
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Coluna 'Pa√≠s' n√£o encontrada.")

    # üìè Dimens√µes
    with sb4:
        col_comp = 'Comprimento' if 'Comprimento' in df_cancel.columns else None
        col_larg = 'Largura' if 'Largura' in df_cancel.columns else None
        if col_comp and col_larg:
            df_cancel[col_comp] = pd.to_numeric(df_cancel[col_comp], errors='coerce')
            df_cancel[col_larg] = pd.to_numeric(df_cancel[col_larg], errors='coerce')
            dd = df_cancel.dropna(subset=[col_comp,col_larg])
            if not dd.empty:
                fig = px.scatter(dd, x=col_comp, y=col_larg, title='Comprimento x Largura', color=col_status if col_status else None)
                st.plotly_chart(fig, use_container_width=True)
                st.write(dd[[col_comp,col_larg]].describe())
            else:
                st.warning("‚ö†Ô∏è Sem dados v√°lidos.")
        else:
            st.warning("‚ö†Ô∏è Colunas de dimens√µes faltando.")

    # üìä Correla√ß√µes
    with sb5:
        num_cols = df_cancel.select_dtypes(include=[np.number]).columns
        if len(num_cols)>1:
            corr = df_cancel[num_cols].corr()
            fig = px.imshow(corr, title='Matriz de Correla√ß√£o', color_continuous_scale='RdBu')
            st.plotly_chart(fig, use_container_width=True)
            st.dataframe(corr, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Poucas colunas num√©ricas.")

    # ‚öì Ber√ßo
    with sb6:
        col_berc = 'Ber√ßo' if 'Ber√ßo' in df_cancel.columns else None
        if col_berc:
            cb = df_cancel[col_berc].value_counts().rename_axis('Ber√ßo').reset_index(name='Cancelamentos')
            b1, b2 = st.columns(2)
            with b1:
                st.write(cb.head(10))
            with b2:
                fig = px.bar(cb.head(10), y='Ber√ßo', x='Cancelamentos', orientation='h', title='Top 10 Ber√ßos', color='Cancelamentos', color_continuous_scale='Viridis')
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Coluna 'Ber√ßo' n√£o encontrada.")

    # üìÖ Dia da Semana
    with sb7:
        if col_data:
            df_cancel[col_data] = pd.to_datetime(df_cancel[col_data], errors='coerce')
            df_cancel['Dia_Semana'] = df_cancel[col_data].dt.day_name()
            cd = df_cancel['Dia_Semana'].value_counts().rename_axis('Dia da Semana').reset_index(name='Cancelamentos')
            ordem = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday']
            cd['Dia da Semana'] = pd.Categorical(cd['Dia da Semana'], categories=ordem, ordered=True)
            cd = cd.sort_values('Dia da Semana')
            d1, d2 = st.columns(2)
            with d1:
                st.write(cd)
            with d2:
                fig = px.bar(cd, x='Dia da Semana', y='Cancelamentos', title='Cancelamentos por Dia da Semana', color='Cancelamentos', color_continuous_scale='Viridis')
                st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Coluna de data n√£o encontrada.")

    # üí∞ Custos
    with sb8:
        CUSTOS = {
            "TEU":            1200.0,
            "OPERACAO_PORTO": 1150.0,
            "DOCUMENTACAO":    950.0,
            "ARMAZENAGEM_DIA": 575.0,
            "ARMAZENAGEM_DIAS":2,
            "INSPECAO":        95.0
        }
        def calcular_custos(df, coluna_teu):
            df = df.copy()
            df[coluna_teu] = pd.to_numeric(df[coluna_teu], errors='coerce').fillna(0)
            df["C_TEUS"] = df[coluna_teu]*CUSTOS["TEU"]
            df["C_OPER"] = CUSTOS["OPERACAO_PORTO"]
            df["C_DOC"]  = CUSTOS["DOCUMENTACAO"]
            df["C_ARM"]  = df[coluna_teu]*CUSTOS["ARMAZENAGEM_DIA"]*CUSTOS["ARMAZENAGEM_DIAS"]
            df["C_INSP"]= CUSTOS["INSPECAO"]
            df["CUSTO_TOTAL"] = df[["C_TEUS","C_OPER","C_DOC","C_ARM","C_INSP"]].sum(axis=1)
            return df

        if col_conteineres:
            df_cancel = calcular_custos(df_cancel, col_conteineres)
            c1, c2, c3 = st.columns(3)
            with c1:
                st.metric("Custo Total Perdido", f"R$ {df_cancel['CUSTO_TOTAL'].sum():,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            with c2:
                st.metric("Custo M√©dio por Cancelamento", f"R$ {df_cancel['CUSTO_TOTAL'].mean():,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            with c3:
                st.metric("Total de TEUs Afetados", f"{df_cancel[col_conteineres].sum():,.0f}".replace(",", "."))

            # Distribui√ß√£o de custos
            fig = px.box(df_cancel, y="CUSTO_TOTAL", title="Distribui√ß√£o do Custo por Cancelamento", labels={"CUSTO_TOTAL":"R$"})
            st.plotly_chart(fig, use_container_width=True)

            # Evolu√ß√£o mensal de custos
            if col_data:
                df_cancel["Mes"] = df_cancel[col_data].dt.to_period("M")
                cm = df_cancel.groupby("Mes")["CUSTO_TOTAL"].sum().reset_index()
                cm["Mes"] = cm["Mes"].astype(str)
                fig = px.line(cm, x="Mes", y="CUSTO_TOTAL", markers=True, title="Evolu√ß√£o Mensal dos Custos", labels={"CUSTO_TOTAL":"R$"})
                st.plotly_chart(fig, use_container_width=True)

            # Componentes de custo
            comp = df_cancel[["C_TEUS","C_OPER","C_DOC","C_ARM","C_INSP"]].sum().rename(index={
                "C_TEUS":"THC","C_OPER":"Taxa Cancelamento","C_DOC":"Despachante","C_ARM":"Armazenagem","C_INSP":"Scanner"
            }).reset_index().rename(columns={"index":"Tipo","C_TEUS":"Valor"})
            comp["Valor"] = comp["Valor"].apply(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
            st.subheader("üìä Detalhamento dos Custos")
            cols = st.columns(2)
            cols[0].dataframe(comp, hide_index=True, use_container_width=True)
            cols[1].plotly_chart(px.pie(comp, values="Valor", names="Tipo", title="Distribui√ß√£o de Custos"), use_container_width=True)

            # Custo por armador
            if col_armador:
                ca = df_cancel.groupby(col_armador)["CUSTO_TOTAL"].agg(['sum','mean','count']).reset_index()
                ca.columns = [col_armador,"Custo Total","Custo M√©dio","Quantity"]
                ca["Custo Total"] = ca["Custo Total"].apply(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
                ca["Custo M√©dio"] = ca["Custo M√©dio"].apply(lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
                st.subheader("üîç Custos por Armador")
                c1, c2 = st.columns(2)
                c1.dataframe(ca.head(10), hide_index=True, use_container_width=True)
                # gr√°fico
                cg = ca.head(10).copy()
                cg["Custo Total"] = cg["Custo Total"].str.replace("R$ ","").str.replace(".","").str.replace(",",".").astype(float)
                fig = px.bar(cg, x=col_armador, y="Custo Total", title="Top 10 Armadores por Custo Total", color="Custo Total", color_continuous_scale="Viridis")
                c2.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è Coluna de cont√™ineres n√£o encontrada. N√£o √© poss√≠vel calcular custos.")
